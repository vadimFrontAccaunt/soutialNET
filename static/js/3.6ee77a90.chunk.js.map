{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/StartChattingButton.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","../node_modules/@ant-design/icons-svg/es/asn/LikeOutlined.js","../node_modules/@ant-design/icons/es/icons/LikeOutlined.js","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","button_edit","style","formSummaryError","createField","Input","job","type","Textarea","Object","keys","contacts","map","key","contact","StartChat","dispatch","useDispatch","id","to","chatBut","userId","console","log","startDialogWithUser","ProfileData","isOwner","goToEditMode","showContacts","wrapper","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","button_showContacts","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","chooseFileBox","target","files","length","initialValues","formData","then","LikeOutlined","ref","React","AntdIcon","assign","icon","LikeOutlinedSvg","displayName","Post","item","message","likesCount","postForm","required","MyPostsMemorized","memo","postsElements","posts","reverse","p","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","MyPosts","Profile","ProfileContainer","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.6ee77a90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3CwAp\",\"mainPhoto\":\"ProfileInfo_mainPhoto__McB_i\",\"chooseFileBox\":\"ProfileInfo_chooseFileBox__3O23F\",\"wrapper\":\"ProfileInfo_wrapper__2PDsu\",\"button_edit\":\"ProfileInfo_button_edit__3taB5\",\"button_showContacts\":\"ProfileInfo_button_showContacts__1BaTg\",\"status\":\"ProfileInfo_status__3FYVk\",\"job\":\"ProfileInfo_job__2hX9u\",\"chatBut\":\"ProfileInfo_chatBut__2X2zp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3mPEM\",\"posts\":\"MyPosts_posts__38XM7\",\"postForm\":\"MyPosts_postForm__3B0mJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__sY5QM\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\nimport s from './ProfileInfo.module.css'\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div className={s.status}>\n                <b>Status: </b> <span  onClick={activateEditMode}>{props.status || \"You can write yours status here. Just click onse on this message\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input className={s.status} onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                       value={status}/>\n            </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\nimport {ProfileType} from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button className={s.button_edit}>Save</button></div>\n        {error && <div className={style.formSummaryError}>\n            {error}\n        </div>\n        }\n        <div>\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div className={s.job}>\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\n        </div>\n\n        <div>\n            <b>My professional skills</b>:\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\n        </div>\n\n\n        <div>\n            <b>About me</b>:\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n                {/* todo: create some solution for embedded objects */}\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { startDialogWithUser } from \"../../../redux/dialogs-reducer\";\r\nimport s from './ProfileInfo.module.css';\r\n\r\ntype PropsTypeButton = {\r\n    userId: number\r\n}\r\n\r\n\r\nconst StartChat: React.FC<PropsTypeButton> = (props:any) => {\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const startChat = (userId:number) => {\r\n        console.log(userId)\r\n    dispatch(startDialogWithUser(userId))\r\n}\r\n\tif((props.id === 21599) || (props.id === 1079)) {\r\n    return(<NavLink to={'/dialogs'}><button className={s.chatBut}  onClick={() => startChat(props.userId)}>Start Chatting</button></NavLink>)\r\n\t}\r\n\treturn(<></>)\r\n}\r\n\r\nexport default StartChat","import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport {ContactsType, ProfileType} from '../../../types/types';\nimport { useDispatch } from 'react-redux';\nimport { startDialogWithUser } from '../../../redux/dialogs-reducer';\nimport { Redirect } from 'react-router-dom';\nimport StartChat from './StartChattingButton';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        // todo: remove then\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n                {isOwner && <input type={\"file\"} id=\"input_file\" className={s.chooseFileBox} onChange={onMainPhotoSelected}/>}\n\n                { editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\n\n\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n\n    const [contacts, showContacts] = useState(false)\n    \n\n    const toggle = (contact:boolean) => {\n    if(contact){\n        showContacts(false)\n    } else {\n        showContacts(true)\n    }\n}\n\n    return <div className={s.wrapper}>\n        <div >\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <button className={s.button_showContacts} onClick={()=>toggle(contacts)}>Show contacts</button><br/>\n        <StartChat userId = {profile.userId}/>\n        {\n            contacts \n         ? <div>{\n            Object.keys(profile.contacts).map((key)  => {\n            return <Contact key={key} contactTitle={key}  contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n        :<></>\n        }\n        {isOwner && <div><button className={s.button_edit} onClick={goToEditMode}>Edit</button></div>}\n        </div>\n    </div>\n}\n\n\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;\n\n\n\n","// This icon file is generated automatically.\nvar LikeOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 00-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4A106.62 106.62 0 00471 99.9c-52 0-98 35-111.8 85.1l-85.9 311H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h601.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-.2-12.6-2-25.1-5.6-37.1zM184 852V568h81v284h-81zm636.4-353l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 22.4-13.2 42.6-33.6 51.8H329V564.8l99.5-360.5a44.1 44.1 0 0142.2-32.3c7.6 0 15.1 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.2 32.1-19.6 43z\" } }] }, \"name\": \"like\", \"theme\": \"outlined\" };\nexport default LikeOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LikeOutlinedSvg from \"@ant-design/icons-svg/es/asn/LikeOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar LikeOutlined = function LikeOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: LikeOutlinedSvg\n  }));\n};\n\nLikeOutlined.displayName = 'LikeOutlined';\nexport default React.forwardRef(LikeOutlined);","import React from 'react';\nimport s from './Post.module.css';\nimport {LikeOutlined} from '@ant-design/icons'\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://www.blast.hk/attachments/64805/' />\n        { props.message }\n          <div>\n        <span><LikeOutlined /></span> { props.likesCount }\n      </div>\n    </div>\n  )\n}\n\nexport default Post;\n","import React from 'react';\nimport {InjectedFormProps, reduxForm, reset} from \"redux-form\";\nimport {createField, GetStringKeys, Input} from '../../../common/FormsControls/FormsControls';\nimport {required} from '../../../../utils/validators/validators';\nimport s from './../MyPosts.module.css'\n\ntype PropsType = {\n\n}\n\nexport type AddPostFormValuesType = {\n    newPostText: string\n}\n\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\n\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n            <form onSubmit={props.handleSubmit} className={s.postForm}>\n                <div>\n                    { createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Input) }\n                </div>\n                <div>\n                    <button>Add post</button>\n                </div>\n            </form>\n    )\n}\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)\n\n\n\n\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport AddPostForm, {AddPostFormValuesType} from './AddPostForm/AddPostForm';\nimport {PostType} from '../../../types/types';\n\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\n    let postsElements =\n        [...props.posts]\n            .reverse()\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n\n\n    let onAddPost = (values: AddPostFormValuesType) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostForm onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst MyPostsMemorized = React.memo(MyPosts);\n\nexport default MyPostsMemorized;\n","import React from 'react';\nimport {actions} from \"../../../redux/profile-reducer\";\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from '../../../redux/redux-store';\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts);\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from '../../types/types';\nimport { useDispatch } from 'react-redux';\nimport { startDialogWithUser } from '../../redux/dialogs-reducer';\nimport { Redirect } from 'react-router-dom';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile:React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n    )\n}\n\n\n\nexport default Profile;\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AppStateType} from '../../redux/redux-store';\nimport {ProfileType} from '../../types/types';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport s from './Profile.module.css'\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n    constructor(props: PropsType) {\n        super(props);\n    }\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                // todo: may be replace push with Redirect??\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter, withAuthRedirect // redirect - hoc перезагружающий страницу\n)(ProfileContainer);\n\n\n\n\n"],"sourceRoot":""}