{"version":3,"sources":["components/Pages/Chat/ChatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","key","id","message","ref","React","memo","src","photo","width","userName","AddMessageForm","setMessage","isAuth","selectIsAuth","onChange","value","disabled","onClick","sendMessage","to","ChatPage"],"mappings":"4MAeMA,EAAiB,WAEnB,IAAMC,EAAWC,cAGXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,6BACS,UAAXN,GAAsB,4EACvB,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SAKNO,EAAyB,SAAC,ICtCjB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDqCC,IACpC,IAAMC,EAAWT,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKO,YAC3DC,EAAoBC,iBAAuB,MAFd,EAGKC,oBAAS,GAHd,mBAG5BC,EAH4B,KAGdC,EAHc,KAqBnC,OANAX,qBAAU,WACa,IAAD,EAAdU,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAEG,yBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAhBnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAMH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAiB,KAE/EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,KAWnCL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,kBAACC,EAAD,CAASC,IAAKH,EAAEI,GAAIC,QAASL,OACzD,yBAAKM,IAAK3B,MAKZuB,EAAqDK,IAAMC,MAAM,YAAgB,IAAdH,EAAa,EAAbA,QACrE,OAAO,6BACH,yBAAKI,IAAKJ,EAAQK,MAAOvB,MAAO,CAACwB,MAAO,UADrC,IACgD,2BAAIN,EAAQO,UAC/D,6BACCP,EAAQA,QACT,iCAKFQ,EAA+B,WAAO,IAAD,EACThC,mBAAS,IADA,mBAChCwB,EADgC,KACvBS,EADuB,KAEjChD,EAAWC,cAEXgD,EAAS9C,YAAY+C,KACrBhD,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OAAG+C,EACI,6BACH,6BACI,8BAAUE,SAAU,SAAC1B,GAAD,OAAOuB,EAAWvB,EAAEE,cAAcyB,QAAQA,MAAOb,KAEzE,6BACI,4BAAQc,SAAqB,UAAXnD,EAAoBoD,QAbnB,WAClBf,IAGLvC,EAASuD,YAAYhB,IACrBS,EAAW,OAQP,UAID,oCAAE,kBAAC,IAAD,CAAUQ,GAAI,aAGZC,UA/FY,WACvB,OAAO,6BACH,kBAAC,EAAD","file":"static/js/4.58316c6e.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\r\nimport {ChatMessageAPIType} from './../../../api/chat-api'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../../../redux/chat-reducer'\r\nimport {AppStateType} from '../../../redux/redux-store'\r\nimport { selectIsAuth } from '../../../redux/auth-selectors'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({}) => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs( (element.scrollHeight - element.scrollTop) - element.clientHeight ) < 300)\r\n        {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo( ({message}) => {\r\n    return <div>\r\n        <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    if(isAuth) {\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n    } \r\n    return <><Redirect to={'/login'}/></>\r\n}\r\n\r\nexport default ChatPage","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}