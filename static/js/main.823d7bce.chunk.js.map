{"version":3,"sources":["components/common/Preloader/Preloader.tsx","utils/validators/validators.ts","api/profile-api.ts","redux/profile-reducer.ts","api/api.ts","hoc/withAuthRedirect.tsx","api/chat-api.ts","redux/chat-reducer.ts","assets/images/preloader.svg","components/Dialogs/DialogListWithUser/dialogList.module.css","components/Dialogs/DialogItem/dialogItem.module.css","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/dialogs-selectors.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/DialogListWithUser/ListItem.tsx","components/Dialogs/DialogListWithUser/DialogList.tsx","App.tsx","index.tsx","api/dialogs-api.ts","redux/dialogs-reducer.ts","redux/auth-selectors.ts","components/Users/users.module.css","components/common/FormsControls/FormsControls.tsx","assets/images/user.png","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css"],"names":["Preloader","style","backgroundColor","src","preloader","required","value","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","ResultCodesEnum","ResultCodeForCapcthaEnum","axios","create","withCredentials","baseURL","mapStateToPropsForRedirect","isAuth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","map","m","v1","index","array","length","module","exports","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","createField","Input","undefined","className","formSummaryError","LoginPage","useSelector","useDispatch","CaptchaIsRequired","test","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","dialogsReducer","sidebar","usersPage","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","paginator","find_button","onClick","selectedPage","pageNumber","key","User","user","small","userPhoto","find_button1","disabled","some","name","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","validate","setSubmitting","onFilterChanged","isSubmitting","friend_wrapper","friendtype","as","Users","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","following","bind","unfollowing","UsersPage","pageTitle","Header","selectIsAuth","selectCurrentUserLogin","Layout","span","alt","icon","UserOutlined","getDialogs","dialogs","d","getListOfMessages","getMessagerId","dialogsWith","DialogItem","has","hasNewMessages","getMessages","getListOfMesThunk","wrapper__notActive","photo","smallPhoto","userName","wrapper__time","date__dialog","lastDialogActivityDate","date__user","lastUserActivityDate","wrapper__Active","Dialogs","getDialogsThunk","CountOfNewMessages","newMessagesCount","countItem","ListItem","date","addedAt","MYwrapper__oneMes","MYcontt","MYdate","substring","MYtime","MYmes","userSearchFormValidate","DialogList","List","log","wrapper","con","thecSpan","mainSpan","wrapper__messages","l","body","senderId","sendMyMessageThunk","formWrap","field","but","DialogListCOntainer","userIdFromReducer","phot","Content","Sider","Footer","ChatPage","lazy","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","width","mode","height","Item","MessageOutlined","TeamOutlined","CoffeeOutlined","minHeight","path","render","exact","DialogsContainer","Component","AppContainer","withRouter","promise","all","SamuraiJSApp","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","dialogsAPI","myMessages","getListOfMessage","sendMyMessage","setId","dataList","startDialogWithUser","FormControl","meta","touched","children","hasError","styles","formControl","Textarea","input","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.823d7bce.chunk.js","sourcesContent":["import React from 'react';\nimport preloader from \"../../../assets/images/preloader.svg\";\n\ntype PropsType = {\n}\n\nlet Preloader: React.FC = () => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n}\n\nexport default Preloader;\n","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","import {PhotosType, ProfileType} from '../types/types';\nimport {instance, APIResponseType} from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n    }\n}\n","import {FormAction, reset, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from '../types/types';\nimport {usersAPI} from '../api/users-api';\nimport {profileAPI} from '../api/profile-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const),\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let data = await profileAPI.updateStatus(status)\n\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch(error) {\n        //\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file)\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n        return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import axios from \"axios\";\nimport {UserType} from '../types/types';\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers:     {\n        \"API-KEY\": \"a50a2025-9d97-4c32-b7bc-d9e7624fbc27\"\n    }\n});\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCapcthaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from '../redux/redux-store';\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n} as MapPropsType);\n\ntype MapPropsType = {\n    isAuth: boolean\n}\ntype DispatchPropsType = {\n}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to='/login'/>\n\n        return <WrappedComponent {...restProps as WCP}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\n        mapStateToPropsForRedirect, {})\n    (RedirectComponent)\n\n    return ConnectedAuthRedirectComponent;\n}\n","const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from '../api/api'\r\nimport {stopSubmit} from 'redux-form'\r\nimport {authAPI} from '../api/auth-api'\r\nimport {securityAPI} from '../api/security-api'\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Action, Dispatch} from 'redux'\r\nimport {FormAction} from 'redux-form/lib/actions'\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../api/chat-api'\r\nimport {v1} from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","module.exports = __webpack_public_path__ + \"static/media/preloader.6c3daf60.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"dialogList_wrapper__1dOYt\",\"wrapper__oneMes\":\"dialogList_wrapper__oneMes__33sBX\",\"contt\":\"dialogList_contt__3osLV\",\"mes\":\"dialogList_mes__JquP8\",\"MYwrapper__oneMes\":\"dialogList_MYwrapper__oneMes__3nk7T\",\"MYmes\":\"dialogList_MYmes__1DvWE\",\"MYcontt\":\"dialogList_MYcontt__36dkt\",\"field\":\"dialogList_field__gTzsI\",\"but\":\"dialogList_but__1RhL7\",\"con\":\"dialogList_con__2mieg\",\"mainSpan\":\"dialogList_mainSpan__1lNkZ\",\"thecSpan\":\"dialogList_thecSpan__1tTg0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"dialogItem_count__3lK99\",\"wrapper__Active\":\"dialogItem_wrapper__Active__37Kx_\",\"name\":\"dialogItem_name__2QmSc\",\"wrapper__time\":\"dialogItem_wrapper__time__JGsEI\",\"date__user\":\"dialogItem_date__user__25GmI\",\"wrapper__notActive\":\"dialogItem_wrapper__notActive__2psoT\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {instance, APIResponseType, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`);\n    }\n}\n","import {instance} from './api';\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\n    }\n}\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from '../api/auth-api';\nimport {securityAPI} from '../api/security-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\nimport {Action} from 'redux';\nimport {FormAction} from 'redux-form/lib/actions';\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\nimport {required} from '../../utils/validators/validators'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../../redux/auth-reducer'\nimport {Redirect} from 'react-router-dom'\nimport style from './../common/FormsControls/FormsControls.module.css'\nimport {AppStateType} from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\n\n            {captchaUrl && <img src={captchaUrl}/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\n\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n        <div className={style.test}>Данные для теста:<p>Email: free@samuraijs.com</p><p>pass: free</p></div>\n    </div>\n}\n","import {getAuthUserData} from \"./auth-reducer\"\nimport {InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    initialized: false\n};\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\n\nexport default appReducer;\n","let initialState = {}\ntype InitialStateType = typeof initialState\nconst sidebarReducer = (state = initialState, action: any) => {\n    return state;\n}\n\nexport default sidebarReducer;\n","\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n}\n","import {GetItemsType, instance, APIResponseType} from './api';\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\n            .then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n    }\n}\n","import {updateObjectInArray} from '../utils/object-helpers'\nimport {UserType} from '../types/types'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {usersAPI} from '../api/users-api'\nimport {APIResponseType} from '../api/api'\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users ids,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n\n    if (response.resultCode == 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\nexport default usersReducer\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from \"./app-reducer\";\nimport chatReducer from \"./chat-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n    chat: chatReducer\n})\n\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store\n","import React from \"react\"\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    return (props: WCP) => {\n        return <React.Suspense fallback={<div>loading...</div>} >\n            <WrappedComponent {...props} />\n        </React.Suspense>\n    }\n}\n","import {createSelector} from \"reselect\";\nimport { AppStateType } from \"./redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users;\n}\n\nexport const getUsers = createSelector(getUsersSelector,\n    (users) => {\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter;\n}","import React, {useState} from 'react'\nimport s from './Paginator.module.css'\nimport cn from 'classnames'\n\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\n                                      currentPage = 1,\n                                      onPageChanged = x => x,\n                                      portionSize = 9}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(s.paginator)}>\n        { portionNumber > 1 &&\n        <button className={s.find_button} onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n                .map((p) => {\n                return <span className={ cn({\n                    [s.selectedPage]: currentPage === p\n                }, s.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n        { portionCount > portionNumber &&\n            <button className={s.find_button} onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n\n\n    </div>\n}\n\nexport default Paginator;\n","import React from 'react'\nimport s from './users.module.css'\nimport userPhoto from '../../assets/images/user.png'\nimport {NavLink} from 'react-router-dom'\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n\n    return (\n        <div className={s.user}>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                             className={s.userPhoto}/>\n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button className={s.find_button1} disabled={followingInProgress\n                                .some(id => id === user.id)}\n                                      onClick={() => {\n                                          unfollow(user.id)\n                                      }}>\n                                Unfollow</button>\n                            : <button className={s.find_button1} disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          follow(user.id)\n                                      }}>\n                                Follow</button>}\n\n                    </div>\n                </span>\n            <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{'user.location.country'}</div>\n                        <div>{'user.location.city'}</div>\n                    </span>\n                </span>\n        </div>)\n}\n\nexport default User\n","import {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport {FilterType} from '../../redux/users-reducer'\nimport {useSelector} from 'react-redux'\nimport {getUsersFilter} from '../../redux/users-selectors'\nimport s from './users.module.css'\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n    term: string\n    friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useSelector(getUsersFilter)\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        > \n            {({isSubmitting}) => (\n                <Form className={s.friend_wrapper}>\n                    <Field className={s.friendtype} type=\"text\" name=\"term\"/>\n\n                    <Field  className={s.friend} name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting} className={s.find_button}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n","import React, {FC, useEffect} from 'react'\nimport Paginator from '../common/Paginator/Paginator'\nimport User from './User'\nimport {UsersSearchForm} from './UsersSearchForm'\nimport {FilterType, follow, requestUsers, unfollow} from '../../redux/users-reducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from '../../redux/users-selectors'\nimport {useHistory} from 'react-router-dom'\nimport * as queryString from 'querystring'\n\ntype PropsType = {}\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\nexport const Users: FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const following = (userId: number) => {\n        dispatch(follow(userId));\n    }\n    const unfollowing = (userId: number) => {\n        dispatch(unfollow(userId));\n    }\n    return <div>\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={followingInProgress}\n                                     key={u.id}\n                                     unfollow={unfollowing}\n                                     follow={following}\n                    />\n                )\n            }\n        </div>\n    </div>\n}\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport Preloader from '../common/Preloader/Preloader'\nimport {getIsFetching} from '../../redux/users-selectors'\nimport {Users} from './Users'\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n    const isFetching = useSelector(getIsFetching)\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Preloader/> : null}\n        <Users />\n    </>\n}\n","import React, { useEffect } from 'react'\nimport {Link} from 'react-router-dom'\nimport {Avatar, Button, Col, Layout, Row} from 'antd'\nimport {UserOutlined} from '@ant-design/icons'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\nimport {logout} from '../../redux/auth-reducer'\n\n\n\nexport type MapPropsType = {}\n\nexport const Header: React.FC<MapPropsType> = (props) => {\n\n    const isAuth = useSelector(selectIsAuth)\n    const login = useSelector(selectCurrentUserLogin)\n\n    const dispatch = useDispatch()\n\n    const logoutCallback = () => {\n        dispatch(logout())\n    }\n\n    const {Header} = Layout\n\n    return <Header className=\"header\">\n        <Row>\n            <Col span={18}>\n            </Col>\n\n            {isAuth\n                ?<> <Col span={1}>\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                </Col>\n                    <Col span={5}>\n                        <Button onClick={logoutCallback}>Log out</Button>\n                    </Col>\n                </>\n                : <Col span={6}>\n                    <Button>\n                        <Link  to={'/login'}>Login</Link>\n                    </Button>\n                </Col>}\n\n        </Row>\n\n\n    </Header>\n}\n","import {createSelector} from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nexport const getDialogsSelector = (state:AppStateType) => {\r\n\treturn state.dialogsPage.dialogs;\r\n}\r\n\r\nexport const getDialogs = createSelector(getDialogsSelector, (dialogs) => {\r\n\treturn dialogs.filter(d => true)\r\n})\r\n\r\nexport const getListOfMessagesSelector = (state:AppStateType) => {\r\n\treturn state.dialogsPage.messages.items\r\n}\r\n\r\nexport const getListOfMessages = createSelector(getListOfMessagesSelector, (items) => {\r\n\treturn items.filter(i => true)\r\n})\r\n\r\nexport const getMessagerId = (state: AppStateType) => {\r\n\treturn state.dialogsPage.dialogsWith\r\n}\r\n","import React from 'react';\nimport s from './dialogItem.module.css'\nimport userPhoto from '../../../assets/images/user.png'\nimport { NavLink, Redirect, Route } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsAuth } from '../../../redux/auth-selectors';\nimport { getListOfMesThunk } from '../../../redux/dialogs-reducer';\nimport { getDialogs } from '../../../redux/dialogs-selectors';\nimport DialogList, { DialogListCOntainer } from '../DialogListWithUser/DialogList';\n\n\n\n\ntype PropsType = {\n    id:number\n    userName: string\n    lastDialogActivityDate: string\n    lastUserActivityDate: string\n    smallPhoto: string | null\n    hasNewMessages: boolean \n}\n\nconst DialogItem: React.FC<PropsType > = (props) => {\n    const has = props.hasNewMessages\n    const isAuth = useSelector(selectIsAuth)\n    const dispatch = useDispatch()\n    \n\n\n\n    const getMessages = () => {\n      if(isAuth){\n      dispatch(getListOfMesThunk(props.id))\n    }\n\t\telse {return<Redirect to='/login'/>}\n    }\n\n\n\n    if(has === false ){\n    return <NavLink onClick={getMessages} to={`/dialogs/${props.id}/messages`} className={s.wrapper__notActive}>\n         <div className={s.photo}><img src={props.smallPhoto != null ? props.smallPhoto : userPhoto}/></div>\n         <div className={s.name}>{props.userName}</div>\n         <div className={s.wrapper__time}>\n             <div className={s.date__dialog}>Last message:  {props.lastDialogActivityDate}</div>\n             <div className={s.date__user}>Was online:  {props.lastUserActivityDate}</div>\n         </div>\n    </NavLink>}  \n    return (<NavLink onClick={getMessages}  to={`/dialogs/${props.id}/messages`} className={s.wrapper__Active}>\n         <div className={s.photo}><img src={props.smallPhoto != null ? props.smallPhoto : userPhoto}/></div>\n         <div className={s.name}>{props.userName}</div>\n         <div className={s.wrapper__time}>\n            <div className={s.date__dialog}>Last message:  {props.lastDialogActivityDate}</div>\n             <div className={s.date__user}>Was online:  {props.lastUserActivityDate}</div>\n         </div>\n    </NavLink>)\n}\n\nexport default DialogItem;\n\n\n","import React, { useEffect } from 'react';\nimport {  getDialogsThunk, InitialStateType} from '../../redux/dialogs-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { getDialogs } from '../../redux/dialogs-selectors';\nimport DialogItem from './DialogItem/DialogItem';\nimport { selectIsAuth } from '../../redux/auth-selectors';\nimport s from './DialogItem/dialogItem.module.css'\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n}\n\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\n\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n    const dialogs = useSelector(getDialogs)\n    const dispatch = useDispatch()\n    const isAuth = useSelector(selectIsAuth)\n    \n    \n    useEffect(() => {\n        if(isAuth){\n         dispatch(getDialogsThunk())}\n    }, [])\n\n\n\n    if(useSelector(selectIsAuth)){\n    return (\n        <div >\n            <div>\n                     {dialogs.map(d => <DialogItem\n                               id = {d.id} // все id пользователей с которыми есть диалог\n                               userName = {d.userName}    \n                               lastDialogActivityDate = {d.lastDialogActivityDate}\n                               lastUserActivityDate = {d.lastUserActivityDate}  \n                               smallPhoto = {d.photos.small} \n                               hasNewMessages = {d.hasNewMessages}\n                     />)}\n                \n            </div>\n        </div>\n    )\n} else {return <Redirect to={'/login'}/>}}\n\nexport default Dialogs;\n\n type CountType = {\n    \n }\n\nexport const CountOfNewMessages:React.FC<CountType> = (props) => {\n    const dialogs = useSelector(getDialogs)\n    const dispatch = useDispatch()\n    const isAuth = useSelector(selectIsAuth)\n    \n    \n    useEffect(() => {\n        if(isAuth){\n         dispatch(getDialogsThunk())}\n    }, [])\n\n    const count = dialogs.map(d => (d.newMessagesCount))\n    const countItem = count[0]\n\n    if(useSelector(selectIsAuth)){\n    if(countItem === 0){\n    return (<></>)\n    } else {return (<span className={s.count}>{count}</span>)}} else {return <></>}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport {actions} from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\nimport {AppStateType} from '../../redux/redux-store';\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {...actions}),\n    withAuthRedirect\n)(Dialogs)\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getDialogs } from \"../../../redux/dialogs-selectors\";\r\nimport s from \"./dialogList.module.css\"\r\n\r\ntype ListPropsType ={\r\n\tmessage: string\r\n\taddedAt: string\r\n\tid: number\r\n}\r\n\r\nconst ListItem:React.FC<ListPropsType> = (props) => {\r\n\tconst date = props.addedAt\r\n\r\n\t\r\n\tif(props.id === 21599 || 1079) {\r\n\t\treturn(<div className={s.MYwrapper__oneMes}>\r\n\t\t<div className={s.MYcontt}>\r\n\t\t\t<div className={s.MYdate}>{date.substring(0,10)}</div>\r\n\t\t\t<div className={s.MYtime}>{date.substring(10)}</div>\r\n\t\t</div>\r\n\t\t<div className={s.MYmes}>{props.message}</div>\r\n\t</div>)\r\n\t}\r\n\treturn(<div className={s.wrapper__oneMes}>\r\n\t\t<div className={s.mes}>{props.message}</div>\r\n\t\t<div className={s.contt}>\r\n\t\t\t<div className={s.date}>{date.substring(0,10)}</div>\r\n\t\t\t<div className={s.time}>{date.substring(10)}</div>\r\n\t\t</div>\r\n\t</div>)\r\n}\r\n\r\n\r\nexport default ListItem","import { Field, Form, Formik } from \"formik\";\r\nimport React, { useState }  from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { dialogsAPI } from \"../../../api/dialogs-api\";\r\nimport { sendMessage } from \"../../../redux/chat-reducer\";\r\nimport {  sendMyMessageThunk } from \"../../../redux/dialogs-reducer\";\r\nimport { getDialogs, getListOfMessages, getMessagerId } from \"../../../redux/dialogs-selectors\";\r\nimport s from \"./dialogList.module.css\"\r\nimport ListItem from \"./ListItem\";\r\nimport userPhoto from '../../../assets/images/user.png'\r\n\r\n\r\n\r\ntype DialogPropsType = {\r\n\tphoto: string | null\r\n\tname: string\r\n}\r\n\r\ntype userSearchFormType = {\r\n\tmessage: string\r\n}\r\n\r\nconst userSearchFormValidate = (values:any) => {\r\n         const errors = {};\r\n         return errors;\r\n       }\r\n\r\nconst DialogList: React.FC<DialogPropsType> = (props) => {\r\n\tconst List = useSelector(getListOfMessages)\r\n\tconst userId = useSelector(getMessagerId)\r\n\tconsole.log(userId)\r\n\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst submit = (values: userSearchFormType,{ setSubmitting } : {setSubmitting: (setSubmitting: boolean) => void}) => {\r\n\t\tdispatch(sendMyMessageThunk(userId, values.message))\r\n\t\tsetSubmitting(false)\r\n   }\r\n\t\r\n\treturn(<div className={s.wrapper}>\r\n\t\t<div className={s.con}><span className={s.thecSpan}>Dialog with:</span><span className={s.mainSpan}>{props.name}</span><img src={props.photo != null ? props.photo : userPhoto}/></div>\r\n\t\t<div className={s.wrapper__messages}>{List.map(l => <ListItem\r\n\t\t\t\t\tmessage = {l.body}\r\n\t\t\t\t\taddedAt = {l.addedAt}\r\n\t\t\t\t\tid = {l.senderId}\r\n\t\t/>)}\t\t\r\n\t\t</div>\r\n\r\n\t\t<Formik\r\n       initialValues={{ message:''}}\r\n       validate={userSearchFormValidate}\r\n       onSubmit={submit}\r\n\t\t className={s.formWrap}\r\n     >\r\n       {({ isSubmitting }) => (\r\n         <Form>\r\n           <Field className={s.field} type=\"text\" name=\"message\" />\r\n           <button  className={s.but} type=\"submit\" disabled={isSubmitting}>\r\n             Send\r\n           </button>\r\n         </Form>\r\n       )}\r\n     </Formik>\r\n\r\n\t</div>)\r\n}\r\n\r\nexport default DialogList\r\n\r\n\r\n\r\nexport const DialogListCOntainer = () => {\r\n\tconst dialogs = useSelector(getDialogs)\r\n\tconst userIdFromReducer = useSelector(getMessagerId) //нужно отображать только тот массив, в котором совпадают айди с этим значением\r\n\r\n\tfor(let i = 0; i < dialogs.length; i++){\r\n\t\tif(dialogs[i].id === userIdFromReducer){\r\n\t\t\t const phot = dialogs.map(d => (d.photos.small))\r\n\t\t\t const name = dialogs.map(d=>(d.userName))\r\n\tconst photo = phot[i]\r\n\tconst userName = name[i]\r\n\t\t\t\treturn(\r\n\t\t\t\t <div>\r\n                     <DialogList\r\n                               name = {userName}    \r\n                               photo = {photo} \r\n                     />\r\n                \r\n            </div>)\r\n\t\t} \r\n\t}\r\n\treturn <></>\r\n}","import React, {Component} from 'react'\nimport './App.css'\nimport 'antd/dist/antd.css'\nimport { HashRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\nimport {LoginPage} from './components/Login/LoginPage'\nimport {connect, Provider} from 'react-redux'\nimport {compose} from 'redux'\nimport {initializeApp} from './redux/app-reducer'\nimport Preloader from './components/common/Preloader/Preloader'\nimport store, {AppStateType} from './redux/redux-store'\nimport {withSuspense} from './hoc/withSuspense'\nimport {UsersPage} from './components/Users/UsersContainer'\n\nimport { Layout, Menu} from 'antd'\nimport {CoffeeOutlined , UserOutlined, MessageOutlined, TeamOutlined} from '@ant-design/icons'\nimport { Header } from './components/Header/Header'\nimport { CountOfNewMessages } from './components/Dialogs/Dialogs'\nimport DialogsContainer from './components/Dialogs/DialogsContainer'\nimport  { DialogListCOntainer } from './components/Dialogs/DialogListWithUser/DialogList'\n\n\n\n\n\nconst {Content, Footer, Sider} = Layout\n\nconst ChatPage = React.lazy(() => import('./components/Pages/Chat/ChatPage'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\n\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\n\n\n\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occured')\n    }\n\n    \n\n    componentDidMount() {\n        this.props.initializeApp()\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        \n\n\n        return (\n            <Layout>\n                <Header />\n                <Content style={{padding: '0 50px'}}>\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                /*  defaultSelectedKeys={['7']}*/\n                                /*  defaultOpenKeys={['sub1']}*/\n                                style={{height: '100%'}}\n                            >\n                                <Menu.Item key=\"1\" icon={<UserOutlined/>}> <Link to=\"/profile\">Profile</Link></Menu.Item>\n                                <Menu.Item key=\"2\" icon={<MessageOutlined/>}> <Link to=\"/dialogs\">Messages<CountOfNewMessages/></Link></Menu.Item>\n                                <Menu.Item key=\"3\" icon={<TeamOutlined/>}> <Link to=\"/developers\">Developers</Link></Menu.Item>\n                                <Menu.Item key=\"4\" icon={<CoffeeOutlined/>}><Link to=\"/chat\">Publick Chat</Link></Menu.Item>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n\n                            <Switch>\n                                <Route path='/chat'\n                                       render={() => <SuspendedChatPage/>}/>\n                                <Route exact path='/'\n                                       render={() => <Redirect to={'/dialogs'}/>}/>\n\n                                <Route exact path='/dialogs'\n                                       render={() => <DialogsContainer/>}/>\n\n                                <Route exact path='/dialogs/:id?/messages'\n                                       render={() => <DialogListCOntainer/>}/>\n\n                                <Route path='/profile/:userId?'\n                                       render={() => <SuspendedProfile/>}/>\n\n                                <Route path='/developers'\n                                       render={() => <UsersPage pageTitle={'Developers'}/>}/>\n\n                                <Route path='/login'\n                                       render={() => <LoginPage/>}/>\n\n                                <Route path='*'\n                                       render={() => <div>404 NOT FOUND</div>}/>\n\n\n                            </Switch>\n\n                        </Content>\n                    </Layout>\n                </Content>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst SamuraiJSApp: React.FC = () => {\n    return <HashRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default SamuraiJSApp\n","import * as serviceWorker from './serviceWorker';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from \"./App\";\n\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\n\n\n// API\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { allmessageType, DialogType } from '../redux/dialogs-reducer';\r\nimport {instance, APIResponseType} from './api';\r\n\r\n\r\n\r\n\r\nexport const dialogsAPI = {\r\n\tgetDialogs(){ // get all dialogs\r\n\t\treturn instance.get<Array<DialogType>>(`dialogs`).then(res => res.data)\r\n\t},\r\n\tstatrDialogWithUser(userId:number){  \r\n\t\treturn instance.put<APIResponseType>(`dialogs/${userId}`).then(res => res.data)\r\n\t},\r\n\tgetDialogWithUser(userId:number, page:number = 1, count:number = 10){ // get list of messages with your friend\r\n\t\treturn instance.get<allmessageType>(`dialogs/${userId}/messages?page=${page}&count=${count}`).then(res => res.data)\r\n\t},\r\n\tsendMessageToUser(userId:number, body:string){\r\n\t\treturn instance.post<APIResponseType>(`dialogs/${userId}/messages`, {body}).then(res => res.data)\r\n\t},\r\n}","import { message } from 'antd';\nimport store, {BaseThunkType, InferActionsTypes} from './redux-store';\nimport {dialogsAPI} from '../api/dialogs-api'\nimport { PhotosType } from '../types/types';\nimport { authAPI } from '../api/auth-api';\nimport { ResultCodesEnum } from '../api/api';\n\n\nexport type DialogType = {\n    id: number\n    userName: string\n    hasNewMessages:boolean\n    lastDialogActivityDate: string\n    lastUserActivityDate: string\n    newMessagesCount: number\n    photos: PhotosType\n}\n\nexport type AllMessagesRequestType = {\n    items: MessageType\n    totalCount: number\n    error: null | any\n}\n\nexport type MessageType = {\n    id: string\n    body: string\n    translatedBody: null\n    addedAt: string\n    senderId: number\n    senderName: string\n    recipientId: number\n    viewed: boolean\n}\n\nexport type allmessageType = {\n    items: Array<MessageType>\n    totalCount: number\n    error: null | any\n}\n\n\n\nlet initialState = {\n    dialogs: [] as Array<DialogType>,\n    messages: {\n        items: [] as Array<MessageType>,\n        totalCount: 0 as number,\n        error: null as null | any\n    },\n    myMessages: \"\" as string,\n    dialogsWith: 0 as number\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'GET-DIALOGS' : {\n            return {...state, dialogs: action.dialogs}\n        }\n        case 'GET-LIST-OF-MESSAGE' : {\n            return{...state, messages: action.messages }\n        }\n        case 'SEND-MESSAGE-TO-USER' : {\n            return{...state, myMessages: action.myMessages}\n        }\n        case 'SET-ID' : {\n            return {...state, dialogsWith: action.dialogsWith}\n        }\n        default:\n            return state;\n    }\n}\n\n\n\nexport const actions = {\n    getDialogs:(dialogs: Array<DialogType>) => ({type:'GET-DIALOGS', dialogs} as const),\n    getListOfMessage:(messages: allmessageType) => ({type: 'GET-LIST-OF-MESSAGE', messages} as const),\n    sendMyMessage:(myMessages: string) => ({type: 'SEND-MESSAGE-TO-USER', myMessages } as const),\n    setId:(dialogsWith:number) => ({type:'SET-ID', dialogsWith } as const )\n}\nexport const getDialogsThunk = ():ThunkType => {\n    return async (dispatch:any) => {\n        let data = await dialogsAPI.getDialogs()\n        dispatch(actions.getDialogs(data))\n    }\n}\n\nexport const getListOfMesThunk = (userId:number):ThunkType => {\n    return async (dispatch:any) => {\n        let dataList = await dialogsAPI.getDialogWithUser(userId)\n        dispatch(actions.getListOfMessage(dataList))\n        dispatch(actions.setId(userId))\n    }\n}\n\nexport const sendMyMessageThunk = (userId: number, body: string) => {\n    return async(dispatch:any) => {\n        await dialogsAPI.sendMessageToUser(userId, body) \n        dispatch(actions.sendMyMessage(body))\n        let dataList = await dialogsAPI.getDialogWithUser(userId)\n        dispatch(actions.getListOfMessage(dataList))\n        dispatch(actions.setId(userId))\n    }\n}\n\nexport const startDialogWithUser = (userId: number) => {\n    return async(dispatch: any) => {\n        await dialogsAPI.statrDialogWithUser(userId)\n        let data = await dialogsAPI.getDialogs()\n        dispatch(actions.getDialogs(data))\n    }\n}\n \n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType>\n","import {AppStateType} from './redux-store'\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3HrWw\",\"find_button\":\"users_find_button__1AJck\",\"find_button1\":\"users_find_button1__1a2Ck\",\"friend_wrapper\":\"users_friend_wrapper__1FXhj\",\"user\":\"users_user__312fn\"};","import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport {LoginFormValuesType} from '../../Login/LoginPage';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__25dAZ\",\"error\":\"FormsControls_error__1a6rG\",\"formSummaryError\":\"FormsControls_formSummaryError__zibNR\",\"test\":\"FormsControls_test__1A0U6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__x_SFu\",\"pageNumber\":\"Paginator_pageNumber__5zUsR\",\"selectedPage\":\"Paginator_selectedPage__oNbwB\",\"find_button\":\"Paginator_find_button__1q2P5\"};"],"sourceRoot":""}